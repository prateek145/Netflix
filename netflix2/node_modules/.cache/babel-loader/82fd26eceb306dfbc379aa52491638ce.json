{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"./utils\");\n\nfunction paste(element, text, init) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      initialSelectionStart = _ref.initialSelectionStart,\n      initialSelectionEnd = _ref.initialSelectionEnd;\n\n  if (element.disabled) return;\n\n  if (typeof element.value === 'undefined') {\n    throw new TypeError(\"the current element is of type \".concat(element.tagName, \" and doesn't have a valid value\"));\n  }\n\n  (0, _utils.eventWrapper)(function () {\n    return element.focus();\n  }); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRangeIfNecessary)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n\n  _dom.fireEvent.paste(element, init);\n\n  if (!element.readOnly) {\n    var _ref2 = (0, _utils.calculateNewValue)(text, element),\n        newValue = _ref2.newValue,\n        newSelectionStart = _ref2.newSelectionStart;\n\n    _dom.fireEvent.input(element, {\n      inputType: 'insertFromPaste',\n      target: {\n        value: newValue\n      }\n    });\n\n    (0, _utils.setSelectionRangeIfNecessary)(element, {\n      newSelectionStart: newSelectionStart,\n      newSelectionEnd: newSelectionStart\n    });\n  }\n}","map":{"version":3,"sources":["/home/prateek/python_projects/netflix/netflix2/node_modules/@testing-library/user-event/dist/paste.js"],"names":["Object","defineProperty","exports","value","paste","_dom","require","_utils","element","text","init","initialSelectionStart","initialSelectionEnd","disabled","TypeError","tagName","eventWrapper","focus","selectionStart","selectionEnd","setSelectionRangeIfNecessary","length","fireEvent","readOnly","calculateNewValue","newValue","newSelectionStart","input","inputType","target","newSelectionEnd"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,KAAR,GAAgBA,KAAhB;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAAlB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,KAAT,CAAeI,OAAf,EAAwBC,IAAxB,EAA8BC,IAA9B,EAGQ;AAAA,iFAAJ,EAAI;AAAA,MAFNC,qBAEM,QAFNA,qBAEM;AAAA,MADNC,mBACM,QADNA,mBACM;;AACN,MAAIJ,OAAO,CAACK,QAAZ,EAAsB;;AAEtB,MAAI,OAAOL,OAAO,CAACL,KAAf,KAAyB,WAA7B,EAA0C;AACxC,UAAM,IAAIW,SAAJ,0CAAgDN,OAAO,CAACO,OAAxD,qCAAN;AACD;;AAED,GAAC,GAAGR,MAAM,CAACS,YAAX,EAAyB;AAAA,WAAMR,OAAO,CAACS,KAAR,EAAN;AAAA,GAAzB,EAPM,CAO2C;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIT,OAAO,CAACU,cAAR,KAA2B,CAA3B,IAAgCV,OAAO,CAACW,YAAR,KAAyB,CAA7D,EAAgE;AAC9D,KAAC,GAAGZ,MAAM,CAACa,4BAAX,EAAyCZ,OAAzC,EAAkDG,qBAAqB,IAAI,IAAzB,GAAgCA,qBAAhC,GAAwDH,OAAO,CAACL,KAAR,CAAckB,MAAxH,EAAgIT,mBAAmB,IAAI,IAAvB,GAA8BA,mBAA9B,GAAoDJ,OAAO,CAACL,KAAR,CAAckB,MAAlM;AACD;;AAEDhB,EAAAA,IAAI,CAACiB,SAAL,CAAelB,KAAf,CAAqBI,OAArB,EAA8BE,IAA9B;;AAEA,MAAI,CAACF,OAAO,CAACe,QAAb,EAAuB;AAAA,gBAIjB,CAAC,GAAGhB,MAAM,CAACiB,iBAAX,EAA8Bf,IAA9B,EAAoCD,OAApC,CAJiB;AAAA,QAEnBiB,QAFmB,SAEnBA,QAFmB;AAAA,QAGnBC,iBAHmB,SAGnBA,iBAHmB;;AAMrBrB,IAAAA,IAAI,CAACiB,SAAL,CAAeK,KAAf,CAAqBnB,OAArB,EAA8B;AAC5BoB,MAAAA,SAAS,EAAE,iBADiB;AAE5BC,MAAAA,MAAM,EAAE;AACN1B,QAAAA,KAAK,EAAEsB;AADD;AAFoB,KAA9B;;AAOA,KAAC,GAAGlB,MAAM,CAACa,4BAAX,EAAyCZ,OAAzC,EAAkD;AAChDkB,MAAAA,iBAAiB,EAAjBA,iBADgD;AAEhDI,MAAAA,eAAe,EAAEJ;AAF+B,KAAlD;AAID;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paste = paste;\n\nvar _dom = require(\"@testing-library/dom\");\n\nvar _utils = require(\"./utils\");\n\nfunction paste(element, text, init, {\n  initialSelectionStart,\n  initialSelectionEnd\n} = {}) {\n  if (element.disabled) return;\n\n  if (typeof element.value === 'undefined') {\n    throw new TypeError(`the current element is of type ${element.tagName} and doesn't have a valid value`);\n  }\n\n  (0, _utils.eventWrapper)(() => element.focus()); // by default, a new element has it's selection start and end at 0\n  // but most of the time when people call \"paste\", they expect it to paste\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitely start typing with the cursor at 0. Not super common.\n\n  if (element.selectionStart === 0 && element.selectionEnd === 0) {\n    (0, _utils.setSelectionRangeIfNecessary)(element, initialSelectionStart != null ? initialSelectionStart : element.value.length, initialSelectionEnd != null ? initialSelectionEnd : element.value.length);\n  }\n\n  _dom.fireEvent.paste(element, init);\n\n  if (!element.readOnly) {\n    const {\n      newValue,\n      newSelectionStart\n    } = (0, _utils.calculateNewValue)(text, element);\n\n    _dom.fireEvent.input(element, {\n      inputType: 'insertFromPaste',\n      target: {\n        value: newValue\n      }\n    });\n\n    (0, _utils.setSelectionRangeIfNecessary)(element, {\n      newSelectionStart,\n      newSelectionEnd: newSelectionStart\n    });\n  }\n}"]},"metadata":{},"sourceType":"script"}