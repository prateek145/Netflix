{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/prateek/react/netflix2/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport youtube from 'rea';\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchdata() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchdata();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n          src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/prateek/react/netflix2/src/Row.js"],"names":["userEvent","React","useState","useEffect","axios","youtube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchdata","request","get","data","results","console","log","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,KAApB;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA2C;AAAA;;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAeU,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUN,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AAEZ,GARQ,EAQN,CAACJ,QAAD,CARM,CAAT;AASAS,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAACS,GAAP,CAAYC,KAAD,IAAW;AACrB,4BACE;AAEE,UAAA,SAAS,EAAG,cAAaX,UAAU,IAAI,iBAAkB,EAF3D;AAGE,UAAA,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAGW,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACxC,EALH;AAME,UAAA,GAAG,EAAEF,KAAK,CAACG;AANb,WACOH,KAAK,CAACI,EADb;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXA;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBH;;GAnCQlB,G;;KAAAA,G;AAoCT,eAAeA,GAAf","sourcesContent":["import userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport youtube from 'rea'\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({title, fetchUrl, isLargeRow}){\n    const [movies, setMovies] = useState([]);\n\n    useEffect(()=>{\n        async function fetchdata(){\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n        fetchdata();\n\n    }, [fetchUrl])\n    console.log(movies)\n    \n    return (\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row_posters\">\n          {movies.map((movie) => {\n            return (\n              <img\n                key={movie.id}\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            );\n          })}\n        </div>\n\n        {/* container -> poster */}\n      </div>\n    );\n}\nexport default Row"]},"metadata":{},"sourceType":"module"}