{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/prateek/react/netflix2/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport youtube from 'react-youtube';\nimport YouTube from 'react-youtube';\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, settrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchdata() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchdata();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleclick = movie => {\n    if (trailerUrl) {\n      settrailerUrl = \"\";\n    } else {}\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleclick(movie),\n          className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n          src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Row, \"Ye0OZ4S3sHjoiyJmPKHxGosm1pI=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/prateek/react/netflix2/src/Row.js"],"names":["userEvent","React","useState","useEffect","axios","youtube","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","settrailerUrl","fetchdata","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleclick","movie","map","poster_path","backdrop_path","name","id"],"mappings":";;;;;AAAA,OAAOA,SAAP,MAAsB,6BAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA;AAAlB,CAAb,EAA2C;AAAA;;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,UAAD,EAAcC,aAAd,IAA+Bb,QAAQ,CAAC,EAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AAEZ,GARQ,EAQN,CAACN,QAAD,CARM,CAAT;AASAW,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AAEA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,KAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb;;AAQA,QAAOC,WAAW,GAAIC,KAAD,IAAS;AAC1B,QAAGf,UAAH,EAAc;AACVC,MAAAA,aAAa,GAAG,EAAhB;AACH,KAFD,MAEK,CAEJ;AAEJ,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKN;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAACkB,GAAP,CAAYD,KAAD,IAAW;AACrB,4BACE;AAEE,UAAA,OAAO,EAAI,MAAKD,WAAW,CAACC,KAAD,CAF7B;AAGE,UAAA,SAAS,EAAG,cAAalB,UAAU,IAAI,iBAAkB,EAH3D;AAIE,UAAA,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAGkB,KAAK,CAACE,WAAT,GAAuBF,KAAK,CAACG,aACxC,EANH;AAOE,UAAA,GAAG,EAAEH,KAAK,CAACI;AAPb,WACOJ,KAAK,CAACK,EADb;AAAA;AAAA;AAAA;AAAA,gBADF;AAWD,OAZA;AADH;AAAA;AAAA;AAAA;AAAA,YAFF,EAmBGpB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAES;AAApC;AAAA;AAAA;AAAA;AAAA,YAnBjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBH;;GAvDQf,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["import userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport youtube from 'react-youtube'\nimport YouTube from 'react-youtube';\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({title, fetchUrl, isLargeRow}){\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , settrailerUrl] = useState(\"\")\n\n    useEffect(()=>{\n        async function fetchdata(){\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n        fetchdata();\n\n    }, [fetchUrl])\n    console.log(movies)\n\n    const opts = {\n      height: \"390\",\n      width: \"99%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    };\n\n    const  handleclick = (movie)=>{\n        if(trailerUrl){\n            settrailerUrl = \"\"\n        }else{\n            \n        }\n\n    }\n    \n    return (\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row_posters\">\n          {movies.map((movie) => {\n            return (\n              <img\n                key={movie.id}\n                onClick = {()=> handleclick(movie)}\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            );\n          })}\n        </div>\n\n        {/* container -> poster */}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    );\n}\nexport default Row"]},"metadata":{},"sourceType":"module"}