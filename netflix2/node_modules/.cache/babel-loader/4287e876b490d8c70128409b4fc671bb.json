{"ast":null,"code":"import _regeneratorRuntime from\"/home/prateek/python_projects/netflix/netflix2/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/prateek/python_projects/netflix/netflix2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/prateek/python_projects/netflix/netflix2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import userEvent from'@testing-library/user-event';import React,{useState,useEffect}from'react';import axios from'./axios';import YouTube from'react-youtube';var base_url=\"https://image.tmdb.org/t/p/original\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],settrailerUrl=_useState4[1];useEffect(function(){function fetchdata(){return _fetchdata.apply(this,arguments);}function _fetchdata(){_fetchdata=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchdata.apply(this,arguments);}fetchdata();},[fetchUrl]);console.log(movies);var opts={height:\"390\",width:\"99%\",playerVars:{autoplay:1}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{className:\"row_poster \".concat(isLargeRow&&\"row_posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/home/prateek/python_projects/netflix/netflix2/src/Row.js"],"names":["userEvent","React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","settrailerUrl","fetchdata","get","request","data","results","console","log","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id"],"mappings":"wdAAA,MAAOA,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAGA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA,QAASC,CAAAA,GAAT,MAA2C,IAA7BC,CAAAA,KAA6B,MAA7BA,KAA6B,CAAtBC,QAAsB,MAAtBA,QAAsB,CAAZC,UAAY,MAAZA,UAAY,eACXR,QAAQ,CAAC,EAAD,CADG,wCAChCS,MADgC,eACxBC,SADwB,8BAEFV,QAAQ,CAAC,EAAD,CAFN,yCAEhCW,UAFgC,eAEnBC,aAFmB,eAIvCX,SAAS,CAAC,UAAI,SACKY,CAAAA,SADL,qIACV,qKAC0BX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CAD1B,QACUQ,OADV,eAEIL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFJ,gCAGWF,OAHX,wDADU,4CAMVF,SAAS,GAEZ,CARQ,CAQN,CAACN,QAAD,CARM,CAAT,CASAW,OAAO,CAACC,GAAR,CAAYV,MAAZ,EAEA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,KAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAUA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAKlB,KAAL,EADF,cAEE,YAAK,SAAS,CAAC,aAAf,UACGG,MAAM,CAACgB,GAAP,CAAW,SAACC,KAAD,CAAW,CACrB,mBACE,YAGE,SAAS,sBAAgBlB,UAAU,EAAI,iBAA9B,CAHX,CAIE,GAAG,WAAKJ,QAAL,SACDI,UAAU,CAAGkB,KAAK,CAACC,WAAT,CAAuBD,KAAK,CAACE,aADtC,CAJL,CAOE,GAAG,CAAEF,KAAK,CAACG,IAPb,EACOH,KAAK,CAACI,EADb,CADF,CAWD,CAZA,CADH,EAFF,CAmBGnB,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAES,IAApC,EAnBjB,GADF,CAuBH,CACD,cAAef,CAAAA,GAAf","sourcesContent":["import userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({title, fetchUrl, isLargeRow}){\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , settrailerUrl] = useState(\"\")\n\n    useEffect(()=>{\n        async function fetchdata(){\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n        fetchdata();\n\n    }, [fetchUrl])\n    console.log(movies)\n\n    const opts = {\n      height: \"390\",\n      width: \"99%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    };\n\n    \n    \n    return (\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row_posters\">\n          {movies.map((movie) => {\n            return (\n              <img\n                key={movie.id}\n                \n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            );\n          })}\n        </div>\n\n        {/* container -> poster */}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    );\n}\nexport default Row"]},"metadata":{},"sourceType":"module"}