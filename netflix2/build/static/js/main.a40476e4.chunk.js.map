{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","useEffect","a","get","request","data","results","fetchdata","console","log","className","map","movie","src","poster_path","backdrop_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","requests","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a40476e4.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst instance  = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n\n})\n\nexport default instance;","import userEvent from '@testing-library/user-event';\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({title, fetchUrl, isLargeRow}){\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl , settrailerUrl] = useState(\"\")\n\n    useEffect(()=>{\n        async function fetchdata(){\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n        fetchdata();\n\n    }, [fetchUrl])\n    console.log(movies)\n\n    const opts = {\n      height: \"390\",\n      width: \"99%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    };\n\n    \n    \n    return (\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row_posters\">\n          {movies.map((movie) => {\n            return (\n              <img\n                key={movie.id}\n                \n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            );\n          })}\n        </div>\n\n        {/* container -> poster */}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    );\n}\nexport default Row","const API_KEY = 'f214779aa3bd95fa626bdfc391c4e5b9'\n\nconst request = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n\n}\n\nexport default request;","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./request\";\nimport './Banner.css'\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      // Math.floor(Math.random() * request.data.results.length -1)\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n   function truncate(str, n) {\n     return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n   }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n      \n      <div className=\"banner_buttons\">\n        <button className=\"banner_button\">play</button>\n        <button className=\"banner_button\">my list </button>\n      </div>\n\n      <h1 className=\"banner_description\"> {truncate(movie?.overview, 150)}</h1>\n      </div> \n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  ); \n}\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport './Nav.css'\n\nfunction Nav(){\n  const [show, handleshow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 230) {\n        handleshow(true);\n      } else handleshow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n    return (\n      <div className={`nav ${show && \"nav_black\"}`}>\n        <img\n          className=\"nav_logo\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\n          alt=\"Netflix Logo\"\n        />\n\n        <img\n          className=\"nav_avatar\"\n          src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n          alt=\"Netflix Logo\"\n        />\n      </div>\n    );\n}\nexport default Nav;","\nimport './App.css';\nimport Row from './Row';\nimport request from './request';\nimport './Row.css'\nimport Banner from './Banner'\nimport Nav from './Nav';\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      \n      <Nav/>\n      <Banner/>\n      <Row className = \"large\" title = \"NETFLIX ORIGNALS\" fetchUrl = {request.fetchNetflixOriginals} isLargeRow = {true}/>\n      <Row title = \"Trending Now\" fetchUrl = {request.fetchTrending} />\n      <Row title = \"Top Rated\" fetchUrl = {request.fetchTopRated} />\n      <Row title = \"Action Movies\" fetchUrl = {request.fetchActionMovies} />\n      <Row title = \"Comedy Movies\" fetchUrl = {request.fetchComedyMovies} />\n      <Row title = \"Romantic Movies\" fetchUrl = {request.fetchRomanceMovies} />\n      <Row title = \"Horror Movies\" fetchUrl = {request.fetchHorrorMovies} />\n      <Row title = \"Documentries\" fetchUrl = {request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}